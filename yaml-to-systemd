#!/usr/bin/python3
__description__ = ( "Create and set up systemd timers and services as described in a "
                    "specified (terse) YAML file." )
__version__ = "2025-07-02"

# imports {{{1
import subprocess as sp
import sys
import yaml
from   copy    import deepcopy
from   pathlib import Path

import myutils as mu
#----------------------------------------------------------------------------}}}1

GLOBAL_SETTINGS_DEFAULT = { # {{{1
  "shortcuts" : {  # {{{
    # for each key: value pair, key will be replaced with value in unit file fields
    "~" : "%h",
  },  # }}}
  "exec_pre" : "",  # prepend to non-absolute Exec... lines
  "timer_defaults" : { # .timer file defaults {{{
    "Description" : "",      # set by service_set_defaults() to the value of Exec...
    "Persistent"  : "True",  # has no effect unless OnCalendar is used.
    "WantedBy"    : "timers.target",
  }, # }}}
  "service_defaults" : {  # .service file defaults {{{
    "Description" : "",  # set by service_set_defaults() to the value of Exec...
  }, # }}}
  "unit_header"   : f"# {mu.date_iso()}               : generated by {Path(sys.argv[0]).name} " + " ".join(sys.argv[1 : ]),
  "systemd_dir"   : "",     # set by argument parsing
  "systemctl_cmd" : "",     # ""
  "filenames"     : [],     # ""
  "dry_run"       : False,  # ""
  "file_basename" : ""      # set in __main__ loop
} # }}}1
SECTION_LOOKUP = {  # lookup table for each keyword directive {{{
  "After"         : "Unit",
  "Before"        : "Unit",
  "Conflicts"     : "Unit",
  "Description"   : "Unit",
  "Documentation" : "Unit",
  "Requires"      : "Unit",
  "Wants"         : "Unit",

  "CPUSchedulingPolicy" : "Service",
  "Environment"         : "Service",
  "ExecReload"          : "Service",
  "ExecStart"           : "Service",
  "ExecStartPost"       : "Service",
  "ExecStartPre"        : "Service",
  "ExecStop"            : "Service",
  "Group"               : "Service",
  "IOSchedulingClass"   : "Service",
  "RemainAfterExit"     : "Service",
  "Restart"             : "Service",
  "RestartSec"          : "Service",
  "StandardError"       : "Service",
  "StandardOutput"      : "Service",
  "TimeoutStopSec"      : "Service",
  "Type"                : "Service",
  "User"                : "Service",
  "WorkingDirectory"    : "Service",

  "AccuracySec"        : "Timer",
  "OnActiveSec"        : "Timer",
  "OnBootSec"          : "Timer",
  "OnCalendar"         : "Timer",
  "OnStartupSec"       : "Timer",
  "OnUnitActiveSec"    : "Timer",
  "OnUnitInactiveSec"  : "Timer",
  "Persistent"         : "Timer",
  "RandomizedDelaySec" : "Timer",
  "RemainAfterElapse"  : "Timer",
  "Unit"               : "Timer",
  "WakeSystem"         : "Timer",

  "Alias"      : "Install",
  "Also"       : "Install",
  "RequiredBy" : "Install",
  "WantedBy"   : "Install",
} # }}}
SECTION_SORT = [  # order of the section in the output files {{{
  "Unit", "Service", "Timer", "Install"
] # }}}

global GLOBAL_SETTINGS
GLOBAL_SETTINGS = deepcopy(GLOBAL_SETTINGS_DEFAULT)

def run_or_dry_run(cmd, shell=True, check=True, **subproc_args): # {{{
  """
  Run cmd if GLOBAL_SETTINGS doesn't dictate a dry_run, otherwise output what cmd is.
  """
  if not GLOBAL_SETTINGS["dry_run"]:
    sp.run(cmd, shell=shell, check=check, **subproc_args)
  else:
    print(f"$ {cmd}")
#----------------------------------------------------------------------------}}}
def unit_set_defaults(spec, kind): # {{{
  """
  Set the defaults for the unit determined by spec[kind], where kind is "service" or
  "timer". Returns spec[kind] with defaults set.
  """
  u = {**GLOBAL_SETTINGS[f"{kind}_defaults"], **spec[kind]}

  # Try to set Description if it isn't already set.
  if u.get("Description", "") == "":
    for k in ["ExecStart", "ExecStop", "ExecStartPre"]:
      if k in spec.get("service", {}).keys():
        u["Description"] = spec["service"][k]
        break

  # Prepend Exec... lines with exec_pre.
  if len(GLOBAL_SETTINGS["exec_pre"]) > 0:
    for k in ["ExecStart", "ExecStop", "ExecStartPre"]:
      if k in u.keys():
        cmd = u[k].lstrip("@-:+! ")  # strip systemd modifiers
        if not cmd.startswith(("/", "~")):  # don't prepend absolute paths
          systemd_mods = u[k][:u[k].index(cmd)]
          u[k] = f"{systemd_mods}{GLOBAL_SETTINGS['exec_pre']} {cmd}"
  return u
#----------------------------------------------------------------------------}}}
def tr_shortcuts(d): # {{{
  """
  Translate and replace shortcuts in the fields of d.
  """
  d = deepcopy(d)
  for k in d.keys():
    if k == "Description":  # don't translate shortcuts in Description
      continue
    if not isinstance(d[k], str):  # don't try to translate non-strings
      continue
    for (s, r) in GLOBAL_SETTINGS["shortcuts"].items():
      d[k] = d[k].replace(s, r)
  return d
#----------------------------------------------------------------------------}}}
def unit_file(d):  # {{{
  """
  Form the contents of the unit file that d defines. Translate shortcuts as needed.
  """
  d = tr_shortcuts(d)

  # group d by section
  d_by_sec = {}
  for (k,v) in d.items():
    sec = SECTION_LOOKUP[k]
    if sec not in d_by_sec.keys():
      d_by_sec[sec] = []
    d_by_sec[sec].append(f"{k}={v}")

  # form string for the service file and return
  r = GLOBAL_SETTINGS["unit_header"]
  for sec in SECTION_SORT:
    if sec in d_by_sec.keys():
      r += "\n\n" + "\n".join([f"[{sec}]"] + d_by_sec[sec])
  return r
#----------------------------------------------------------------------------}}}

def read_file(filename):  # {{{
  """
  Open the file and star-flatten all the enties in filename, ignoring empty blocks.
  """
  with open(filename, "r") as f:
    blocks = [b for b in yaml.unsafe_load_all(f) if b is not None]
  blocks = [f for b in blocks for f in mu.product_dict(b)]
  return blocks
#----------------------------------------------------------------------------}}}
def form_units(blocks): # {{{
  """
  Read the blocks, updating global settings and forming entries for the unit files.
  """
  filename_start = f"{GLOBAL_SETTINGS['systemd_dir']}/{GLOBAL_SETTINGS['file_basename']}"
  unit_file_pad_len = len(str(len([b for b in blocks if "service" in b.keys()])-1))
  filename_fmt = lambda c, s: f"{filename_start}_{c:0{unit_file_pad_len}d}.{s}"

  units = []
  count = 0
  for b in blocks:
    for k in b.keys():
      if k in GLOBAL_SETTINGS.keys():
        if isinstance(GLOBAL_SETTINGS[k], dict):
          GLOBAL_SETTINGS[k].update(b[k])
        else:
          GLOBAL_SETTINGS[k] = b[k]
      elif k in ["service", "timer"]:
        units.append({"filename": filename_fmt(count, k), "unit": unit_set_defaults(b, k)})
        count += 1 if k == "service" else 0  # only count .service units
      else:
        raise ValueError(f"unknown key {k} in specification {b}")

  return units
#----------------------------------------------------------------------------}}}
def cleanup_old_files(): # {{{
  """
  Disable timers of the form
    <systemd_dir>/timers.target.wants/<prefix>*.timer
  and delete files of the form
    <systemd_dir>/<prefix>*.{service,timer}
  where
    systemd_dir = GLOBAL_SETTINGS["systemd_dir"]  and
    prefix = GLOBAL_SETTINGS["file_basename"].
  """
  systemd_dir = GLOBAL_SETTINGS["systemd_dir"]
  prefix = GLOBAL_SETTINGS["file_basename"]
  systemctl_cmd = GLOBAL_SETTINGS["systemctl_cmd"]
  for f in mu.files_in_dir(systemd_dir + "/timers.target.wants/"):
    if f.startswith(prefix) and f.endswith(".timer"):
      run_or_dry_run(f"{systemctl_cmd} stop {f} && {systemctl_cmd} disable {f}")
  run_or_dry_run(f"rm {systemd_dir}/{prefix}*.service; rm {systemd_dir}/{prefix}*.timer", check=False)
#----------------------------------------------------------------------------}}}
def create_unit_files(units):  # {{{
  """
  Create unit files or print what their contents would be, depending on whether
  dry-run is set.
  """
  for u in units:
    if not GLOBAL_SETTINGS["dry_run"]:
      with open(u["filename"], "w") as f:
        f.write(unit_file(u["unit"]))
    else:
      print(f"--- {u['filename']} ---\n{unit_file(u['unit'])}\n---")
#----------------------------------------------------------------------------}}}
def run_systemctl_cmds(units):  # {{{
  """
  Reload the systemd user daemon and for each timer in units, enable and start it.
  """
  # run all the necessary systemctl commands
  systemctl_cmd = GLOBAL_SETTINGS["systemctl_cmd"]
  run_or_dry_run(f"{systemctl_cmd} daemon-reload")
  for u in units:
    if u["filename"].endswith(".timer"):
      basename = Path(u["filename"]).name
      run_or_dry_run(f"{systemctl_cmd} enable {basename} && {systemctl_cmd} start {basename}")
#----------------------------------------------------------------------------}}}

if __name__ == "__main__":  # {{{1
  # argument parsing {{{
  import argparse
  parser = argparse.ArgumentParser(description=__description__)
  parser.add_argument("--version", "-v", action="version", version="%(prog)s " + __version__)

  parser.add_argument("filenames", nargs='+', metavar="FILE", help="YAML file")
  parser.add_argument(
    "--user", "-u", action="store_true",
    help="run systemctl in user mode and create user mode unit files"
  )
  parser.add_argument(
    "--dry-run", action="store_true",
    help="make no modifications, only output what would be done"
  )

  options = parser.parse_args()
  if options.user:
    GLOBAL_SETTINGS_DEFAULT["systemd_dir"] = Path("~/.config/systemd/user").expanduser().as_posix()
    GLOBAL_SETTINGS_DEFAULT["systemctl_cmd"] = "systemctl --user"
  else:
    GLOBAL_SETTINGS_DEFAULT["systemd_dir"] = Path("/etc/systemd/system").as_posix()
    GLOBAL_SETTINGS_DEFAULT["systemctl_cmd"] = "systemctl"
  GLOBAL_SETTINGS_DEFAULT.update({
    "filenames" : options.filenames,
    "dry_run"   : options.dry_run,
  })
  # }}}

  for filename in GLOBAL_SETTINGS_DEFAULT["filenames"]:
    GLOBAL_SETTINGS = deepcopy(GLOBAL_SETTINGS_DEFAULT)
    GLOBAL_SETTINGS["file_basename"] = Path(filename).stem.lstrip(".")

    blocks = read_file(filename)
    units = form_units(blocks)
    cleanup_old_files()
    create_unit_files(units)
    run_systemctl_cmds(units)
#----------------------------------------------------------------------------}}}1
